% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*copyright>
Copyright 2023, RadioNoiseE
NianCLS, 年文檔類
%</copyright>
%<*internal>
\fi
\begingroup
\def\FORMAT{LaTeX2e}
\expandafter\endgroup
\ifx\fmtname\FORMAT\else
\csname fi\endcsname
%</internal>
%<*batchfile>
\input docstrip.tex
\keepsilent
\askonceonly
\edef\HEAD{\perCent\perCent　年文檔類　黄京}
\generate{
    \usepreamble\HEAD
    \usepostamble\empty
    \file{niancls.cls}{\from{\jobname.dtx}{cls}}
}
\begingroup
\obeyspaces
\Msg{*******}
\Msg{* End *}
\Msg{*******}
\endgroup
\endbatchfile
%</batchfile>
%<*internal>
\fi
%</internal>
%<*driver>
\makeatletter
\def\ltj@stdmcfont{SourceHanSerifSC}
%%\def\ltj@stdyokojfm{eva/{sc,nstd}}
\makeatother
\documentclass{ltjsarticle}
%%\documentclass{l3doc}
\usepackage{doc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
%%\def\PrintDescribeMacro{}
%%\def\PrintDescribeEnv{}
%%\def\PrintMacroName{}
%%\def\PrintEnvName{}
\usepackage{luatexja-fontspec}
%%\usepackage{fontspec}
\setmainfont{Linux Libertine O}
\setmainjfont{SourceHan Serif SC}[YokoFeatures={JFM={eva/{sc,nstd}}}]
\setsansfont{Linux Biolinum O}
\setmonofont{Iosevka Slab}[Scale=MatchLowercase, FakeStretch=1.138]
%%\setmonofont{LetterGothicStdMedium.ttf}[Scale=MatchLowercase]
%%\setmonofont{Fira Code}[Scale=MatchLowercase]
\def\LuaTeX{Lua\kern-.2ex\TeX}
\makeatletter
\def\theCodelineNo{\llap{\reset@font\tiny\arabic{CodelineNo}\hskip12pt}}
\makeatother
\parindent=0pt
\begin{document}
\DocInput{\jobname.dtx}
\PrintIndex
\end{document}
%</driver>
% \fi
% \title{\sffamily\gtfamily 年文檔類{\quad}Nian Class}
% \author{黄　京}
% \date{西曆\today}
% \maketitle
% % \begin{abstract}
% % 为在{\LuaTeX}下排印中日文本而作的文档类。基于{\sffamily expl3}构建。
% % \end{abstract}
% \section{初始化}
% \subsection{載入{\LaTeX3}並檢驗依賴}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{expl3}
\ProvidesExplClass{niancls}{2023-04-15}{1.0.0}{Nian Document Class}
%    \end{macrocode}
% 定义载入文档类信息等。
%    \begin{macrocode}
%<@@=ncls>
\prop_gput:Nnn \g_msg_module_name_prop { ncls } { niancls }
%    \end{macrocode}
% 申明结束。接下来检查依赖，首先为{\sffamily xparse}、{\sffamily l3keys2e}及{\sffamily etoolbox}宏包。
%    \begin{macrocode}
\cs_if_exist:NF \NewDocumentCommand
  { \RequirePackage { xparse } }
\cs_if_exist:NTF \ProcessKeyOptions
  { \cs_new:Nn \@@_keyoptions_process:n { \ProcessKeyOptions { #1 } } }
  {
    \RequirePackage { l3keys2e }
    \cs_new:Nn \@@_keyoptions_process:n { \ProcessKeysOptions { #1 } }
  }
\cs_if_exist:NF \AtEndPreamble
  { \RequirePackage { etoolbox } }
%    \end{macrocode}
% 接下来检查{\sffamily expl3}的版本。
%    \begin{macrocode}
\@ifpackagelater { expl3 } { 2021-02-10 } { }
  {
    \msg_new:nnnn { ncls } { latex3-too-old }
      { Package~`l3kernel'~and~`l3packages'~too~old. }
      {
        You~need~to~update~your~installation~of~the~bundles~
        `l3kernel'~and~`l3packages'. \\
        Loading~niancls~will~abort!
      }
    \msg_critical:nn { ncls } { latex3-too-old }
  }
%    \end{macrocode}
% 后进行{\LaTeXe}格式之版本检查。
%    \begin{macrocode}
\@ifl@t@r \fmtversion { 2021-06-01 } { }
  {
    \msg_new:nnnn { ncls } { latex-too-old }
      { Format~LaTeX2e~version~too~old. }
      {
        You~need~to~update~your~LaTeX2e~to~the~latest~release. \\
        Loading~niancls~will~abort!
      }
    \msg_critical:nn { ncls } { latex-too-old }
  }
%    \end{macrocode}
% 最后检查{\LaTeX}引擎，仅支持使用{\LuaTeX}编译。
%    \begin{macrocode}
\sys_if_engine_luatex:F
  {
    \msg_new:nnnn { ncls } { unsupported-engine }
      { LuaTeX~is~the~only~supported~engine~for~niancls. }
      {
        You~should~switch~to~LuaTeX~to~use~niancls. \\
        Loading~niancls~will~abort!
      }
    \msg_fatel:nn { ncls } { unsupported-engine }
  }
%    \end{macrocode}
% \subsection{私有定義}
% 定义\verb|\AtEndPreamble|钩子。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_preamble_end:n { \AtEndPreamble }
%    \end{macrocode}
% 「疑」定义\verb|\AtEndOfClass|钩子。
%    \begin{macrocode}
% \cs_new_protected:Npn \@@_at_end:n { \AtEndOfClass }
%    \end{macrocode}
% 定义\verb|\AtBeginDocument|钩子。
%    \begin{macrocode}
\cs_new_protected:Npn \@@_doc_beg:n { \AtBeginDocument }
%    \end{macrocode}
% 定义用于在读取结束后释放缓存的宏。
%    \begin{macrocode}
\seq_new:N \g_@@_aftercls_del_seq
\cs_set:Nn \@@_aftercls_addtodel:N
  { \seq_gput_right:Nn \g_@@_aftercls_del_seq { #1 } }
\@@_preamble_end:n
  {
    \ExplSyntaxOn
    \cs_undefine:N \g_@@_aftercls_del_seq
    \ExplSyntaxOff
  }
%    \end{macrocode}
% 封装{\LuaTeX}提供的Lua接口。
%    \begin{macrocode}
\cs_new:Npn \@@_luafunc_new:N { \newluafunction }
\cs_new:Npn \@@_luafunc_use:N { \luafunction }
%    \end{macrocode}
% 提供键对值的统一错误调试处理模版。
%    \begin{macrocode}
\msg_new:nnnn { ncls } { unknown-choice }
  { Unknown~choice~given~to~key~`#1' }
  { 
    Valid~choices~are:~#2; \\
    while~you~gave:~#3.
  }
%    \end{macrocode}
% \subsection{內存清理}
% 在导言区末尾清除所有非必要宏。
%    \begin{macrocode}
\@@_aftercls_addtodel:N \@@_keyoptions_process:n
\@@_aftercls_addtodel:N \@@_preamble_end:n
% \@@_aftercls_addtodel:N \@@_at_end:n
\@@_aftercls_addtodel:N \@@_at_doc_begin:n
\@@_aftercls_addtodel:N \@@_aftercls_addtodel:N
\@@_aftercls_addtodel:N \@@_luafunc_new:N
\@@_aftercls_addtodel:N \@@_luafunc_use:N
%    \end{macrocode}
% \section{鍵對直之「預處理」}
% \subsection{紙張配置用}
% \subsubsection{尺寸信息}
% 处理纸张尺寸信息。
%    \begin{macrocode}
\tl_new:N \g_@@_paper_sizeinfo_tl
\keys_define:nn { ncls }
  {
    paper .tl_gset:N = \g_@@_paper_sizeinfo_tl,
    paper .value_required:n = true,
    peper .initial:n = { a4 }
  }
%    \end{macrocode}
% \subsubsection{頁面方向}
% 設置页面方向。
%    \begin{macrocode}
\bool_new:N \g_@@_paper_portrait_bool
\keys_define:nn { ncls }
  {
    orientation .choice:,
    orientation / portrait .code:n = { \bool_gset_true:N \g_@@_paper_portrait_bool },
    orientation / landscape .code:n = { \bool_gset_false:N \g_@@_paper_portrait_bool },
    orientation / unknown .code:n =
      {
        \msg_error:nnxxx { ncls } { unknown-choice }
          { orientation }
          { portrait,~landscape }
          { \exp_not:n { #1 } }
      },
    orientation .value_required:n = true,
    orientation .initial:n = { portrait }
  }
%    \end{macrocode}
% \subsection{組版方向}
% 确定使用竖书或是横排。
%    \begin{macrocode}
\bool_new:N \g_@@_dir_tate_bool
\keys_define:nn { ncls }
  {
    direction .choice:,
    direction / yoko .code:n = { \bool_gset_false:N \g_@@_dir_tate_bool },
    direction / tate .code:n = { \bool_gset_true:N \g_@@_dir_tate_bool },
    direction / unknown .code:n =
      {
        \msg_new:nnxxx { ncls } { unknown-choice }
          { direction }
          { yoko,~tate }
          { \exp_not:n { #1 } }
      },
    direction .value_required:n = true,
    direction .initial:n = { yoko }
  }
%    \end{macrocode}
% \subsection{字體相關配置用}
% \subsubsection{全局基準字體參數設定}
% 处理用户所需的全局基准字体设置。
%    \begin{macrocode}
\tl_new:N \g_@@_font_magscale_tl
\keys_define:nn { ncls }
  {
    fontsize .choice:,
    fontsize /  7pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 0.6940 } },
    fontsize /  8pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 0.8330 } },
    fontsize /  9pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 0.9130 } },
    fontsize / 10pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 1.0000 } },
    fontsize / 11pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 1.0953 } },
    fontsize / 12pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 1.2000 } },
    fontsize / 13pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 1.3000 } },
    fontsize / 14pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 1.4400 } },
    fontsize / 15pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 1.5000 } },
    fontsize / 16pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 1.6000 } },
    fontsize / 17pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 1.7280 } },
    fontsize / 20pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 2.0000 } },
    fontsize / 21pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 2.0740 } },
    fontsize / 24pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 2.4000 } },
    fontsize / 25pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 2.4880 } },
    fontsize / 30pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 2.9860 } },
    fontsize / 36pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 3.5830 } },
    fontsize / 43pt .code:n = { \tl_gset:Nn \g_@@_font_magscale_tl { 4.3000 } },
    fontsize / unknown .code:n =
      {
        \msg_error:nnxxx { ncls } { unknown-choice }
          { fontsize }
          {
             7pt,~  8pt,~  9pt,~ 10pt,~ 11pt,~ 12pt,~ 13pt,~ 14pt,~ 15pt,~
            17pt,~ 20pt,~ 21pt,~ 24pt,~ 25pt,~ 30pt,~ 36pt,~ 43pt
          }
          { \exp_not:n { #1 } }
      },
    fontsize .value_required:n = true,
    fontsize .initial:n = { 10pt }
  }
%    \end{macrocode}
% \subsubsection{語言設定}
% 设置文档类之全局语言。
%    \begin{macrocode}
\str_new:N \g_@@_lang_cj_str
\keys_define:nn { ncls }
  {
    language .choice:,
    language / trad .code:n = { \str_gset:Nn \g_@@_lang_cj_str { t } },
    language / smpl .code:n = { \str_gset:Nn \g_@@_lang_cj_str { s } },
    language / jp .code:n = { \str_gset:Nn \g_@@_lang_cj_str { j } },
    language / unknown .code:n =
      {
        \msg_error:nnxxx { ncls } { unknown-choice }
          { language }
          { trad,~smpl,~jp }
          { \exp_not:n { #1 } }
      },
    language .value_required:n = true,
    language .initial:n = { jp }
  }
%    \end{macrocode}
% \subsubsection{字體設定}
% 设定全局明朝及哥特字体。
%    \begin{macrocode}
\tl_new:N \g_@@_font_mincho_tl
\tl_new:N \g_@@_font_gothic_tl
\keys_define:nn { ncls }
  {
    mincho .tl_gset:N = \g_@@_font_mincho_tl,
    gothic .tl_gset:N = \g_@@_font_gothic_tl,
    mincho .value_required:n = true,
    gothic .value_required:n = true,
    mincho .initial:n = { HaranoAji Mincho },
    gothic .initial:n = { HaranoAji Gothic }
  }
%    \end{macrocode}
% \subsubsection{字體縮放率設定}
% 设置全局中日字符缩放率的值。
%    \begin{macrocode}
\tl_new:N \g_@@_font_cjscale_tl
\keys_define:nn { ncls }
  {
    scale .tl_gset:N = \g_@@_font_cjsacle_tl,
    scale .value_required:n = true,
    scale .initial:n = { 0.924715 }
  }
%    \end{macrocode}
% \subsubsection{字體矩陣高級設定}
% 设置全局标点特性。
%    \begin{macrocode}
\bool_new:N \g_@@_jfm_hanging_bool
\bool_new:N \g_@@_jfm_linegap_bool
\keys_define:nn { ncls }
  {
    punct .multichoice:,
    punct / hanging .code:n = { \bool_gset_true:N \g_@@_jfm_hanging_bool },
    punct / linegap .code:n = { \bool_gset_true:N \g_@@_jfm_linegap_bool },
    punct .value_required:n = true
  }
%    \end{macrocode}
% \subsubsection{視覺字號補正}
% 判断是否对NFSS视觉字号进行补正。
%    \begin{macrocode}
\bool_new:N \g_@@_font_xreal_bool
\keys_define:nn { ncls }
  {
    magstyle .choice:,
    magstyle / real .code:n = { \bool_gset_false:N \g_@@_font_xreal_bool },
    magstyle / xreal .code:n = { \bool_gset_true:N \g_@@_font_xreal_bool },
    magstyle .value_required:n = true,
    magstyle .initial:n = { xreal }
  }
%    \end{macrocode}
% \subsubsection{回滾字體特性}
% 设置（可选）的回滚字体特性。其依赖\textsf{luaotfload}宏集的实验特性，危险呐。
%    \begin{macrocode}
\bool_new:N \g_@@_font_fallback_bool
\tl_new:N \g_@@_font_fallback_tl
\keys_define:nn { ncls }
  {
    fallback .code:n =
      {
        \bool_gset_true:N \g_@@_font_fallback_bool
        \tl_gset:Nn \g_@@_font_fallback_tl { #1 }
      }
    fallback .value_required:N = true
  }
%    \end{macrocode}
% \subsection{初始化處理}
% 使用封裝的宏處理用戶設置。
%    \begin{macrocode}
\@@_keyoptions_process:n { ncls }
%    \end{macrocode}
% \section{主要特性}
% \subsection{紙張尺寸配置}
% \subsubsection{全局宏申明}
% 申明存储纸张尺寸信息的特性列表。
%    \begin{macrocode}
\prop_new:N \g_@@_paper_sizelist_prop
%    \end{macrocode}
% 用户指定、暂时存储的字列表已定义，此处存储最终数据的逗号列表及纸长度及宽度的全局申明。
%    \begin{macrocode}
\clist_new:N \g_@@_paper_sizeconf_clist
\dim_new:N \g_@@_paper_width_dim
\dim_new:N \g_@@_paper_height_dim
%    \end{macrocode}
% 以及两个存储长、宽的局部宏。
%    \begin{macrocode}
\tl_new:N \l_@@_paper_widthaux_tl
\tl_new:N \l_@@_paper_heightaux_tl
%    \end{macrocode}
% \subsubsection{主要功能宏}
% 随后定义用于添加尺寸信息的宏。
%    \begin{macrocode}
\cs_new:Nn \@@_paper_addsize:nnn
  {
    \prop_put_if_new:Nnn \g_@@_paper_sizelist_prop
      { #1 }
      { { #2 }, { #3 } }
  }
%    \end{macrocode}
% \subsubsection{尺寸參數設定}
% 通过\verb|\__ncls_addpapersize:nnn|设置具体参数。
%    \begin{macrocode}
\@@_paper_addsize:nnn { a0  } {  841 mm } { 1189 mm }
\@@_paper_addsize:nnn { a1  } {  594 mm } {  841 mm }
\@@_paper_addsize:nnn { a2  } {  420 mm } {  594 mm }
\@@_paper_addsize:nnn { a3  } {  297 mm } {  420 mm }
\@@_paper_addsize:nnn { a4  } {  210 mm } {  297 mm }
\@@_paper_addsize:nnn { a5  } {  148 mm } {  210 mm }
\@@_paper_addsize:nnn { a6  } {  105 mm } {  148 mm }
\@@_paper_addsize:nnn { b0  } { 1000 mm } { 1414 mm }
\@@_paper_addsize:nnn { b1  } {  707 mm } { 1000 mm }
\@@_paper_addsize:nnn { b2  } {  500 mm } {  707 mm }
\@@_paper_addsize:nnn { b3  } {  353 mm } {  500 mm }
\@@_paper_addsize:nnn { b4  } {  250 mm } {  353 mm }
\@@_paper_addsize:nnn { b5  } {  176 mm } {  250 mm }
\@@_paper_addsize:nnn { b6  } {  125 mm } {  176 mm }
\@@_paper_addsize:nnn { c0  } {  917 mm } { 1297 mm }
\@@_paper_addsize:nnn { c1  } {  648 mm } {  917 mm }
\@@_paper_addsize:nnn { c2  } {  458 mm } {  648 mm }
\@@_paper_addsize:nnn { c3  } {  324 mm } {  458 mm }
\@@_paper_addsize:nnn { c4  } {  229 mm } {  324 mm }
\@@_paper_addsize:nnn { c5  } {  162 mm } {  229 mm }
\@@_paper_addsize:nnn { c6  } {  114 mm } {  162 mm }
\@@_paper_addsize:nnn { b0j } { 1030 mm } { 1456 mm }
\@@_paper_addsize:nnn { b1j } {  728 mm } { 1030 mm }
\@@_paper_addsize:nnn { b2j } {  515 mm } {  728 mm }
\@@_paper_addsize:nnn { b3j } {  364 mm } {  515 mm }
\@@_paper_addsize:nnn { b4j } {  257 mm } {  364 mm }
\@@_paper_addsize:nnn { b5j } {  182 mm } {  257 mm }
\@@_paper_addsize:nnn { b6j } {  128 mm } {  182 mm }
\@@_paper_addsize:nnn { screen } { 225 mm } { 180 mm }
%    \end{macrocode}
% \subsubsection{內部參數處理}
% 处理用户设定「一」：处理键对值列表的两种分支情况。
%    \begin{macrocode}
\prop_if_in:NoT \g_@@_paper_sizelist_prop
  { \tl_to_str:N \g_@@_paper_sizeinfo_tl }
  {
    \prop_get:NoN \g_@@_paper_sizelist_prop
      { \tl_to_str:N \g_@@_paper_sizeinfo_tl }
      \g_@@_paper_sizeinfo_tl
  }
%    \end{macrocode}
% 处理用户设定「二」：处理字列表，使用逗号列表将长、宽分离。
%    \begin{macrocode}
\clist_gset:Nx \g_@@_paper_sizeconf_clist
  { \g_@@_paper_sizeinfo_tl }
\clist_gpop:NN \g_@@_paper_sizeconf_clist \l_@@_paper_widthaux_tl
\clist_gpop:NN \g_@@_paper_sizeconf_clist \l_@@_paper_heightaux_tl
%    \end{macrocode}
% \subsubsection{頁面方向}
% 处理页面方向选项。
%    \begin{macrocode}
\bool_if:NTF \g_@@_paper_portrait_bool
  {
    \dim_gset:Nn \g_@@_paper_width_dim
      { \tl_use:N \l_@@_paper_widthaux_tl }
    \dim_gset:Nn \g_@@_paper_height_dim
      { \tl_use:N \l_@@_paper_heightaux_tl }
  }
  {
    \dim_gset:Nn \g_@@_paper_width_dim
      { \tl_use:N \l_@@_paper_heightaux_tl }
    \dim_gset:Nn \g_@@_paper_height_dim
      { \tl_use:N \l_@@_paper_widthaux_tl }
  }
%    \end{macrocode}
% \subsubsection{完成設置}
% 完成纸张给配置。
%    \begin{macrocode}
\pdf_pagesize_gset:nn
  { \dim_use:N \g_@@_paper_width_dim }
  { \dim_use:N \g_@@_paper_height_dim }
%    \end{macrocode}
% \subsubsection{清除內存}
% 并做好内存管理。
%    \begin{macrocode}
\@@_aftercls_addtodel:N \@@_paper_addsize:nnn 
\@@_aftercls_addtodel:N \g_@@_paper_sizelist_prop
\@@_aftercls_addtodel:N \g_@@_paper_sizeinfo_tl
\@@_aftercls_addtodel:N \g_@@_paper_sizeaux_tl
\@@_aftercls_addtodel:N \g_@@_paper_sizeconf_clist
\@@_aftercls_addtodel:N \g_@@_paper_width_dim
\@@_aftercls_addtodel:N \g_@@_paper_height_dim
\@@_aftercls_addtodel:N \g_@@_paper_portrait_bool
\@@_aftercls_addtodel:N \l_@@_paper_widthaux_tl
\@@_aftercls_addtodel:N \l_@@_paper_heightaux_tl
%    \end{macrocode}
% \subsection{字體矩陣配置}
% \subsubsection{全局宏申明}
% 全局逗号列表申明。
%    \begin{macrocode}
\clist_new:N \g_@@_jfm_feats_clist
%    \end{macrocode}
% \subsubsection{主要}
% 其定义及作用域分散于后二节中，此章仅为占位。初始化其。
%    \begin{macrocode}
\clist_gset:Nn \g_@@_jfm_feats_clist { nstd }
%    \end{macrocode}
% \subsubsection{內存管理}
% 于最后清除之。
%    \begin{macrocode}
\@@_aftercls_addtodel:N \g_@@_jfm_feats_clist
%    \end{macrocode}
% \subsection{組版方向配置}
% \subsubsection{鉤子及定義}
% 支持纵排组版，使用钩子进行处理。
%    \begin{macrocode}
\bool_if:NT \g_@@_dir_tate_bool
  {
    \RequirePackage { lltjext } \tate
    \@@_doc_beg:n
      {
        \message {《縦組モード》} \adjustbaseline
      }
  }
%    \end{macrocode}
% \subsubsection{字體矩陣配置}
% 「疑」同时配置对应的字体矩阵特性。（其逗号列表的宏定义将在「字体矩阵配置・内存管理」中被定义与清除。）
%    \begin{macrocode}
% \bool_if:NT \g_@@_dir_tate_bool
%   { \clist_gput_left:Nn \g_@@_jfm_feats_clist { vert } }
%    \end{macrocode}
% \subsubsection{內存管理}
% 清除存储对方向之判断的宏。
%    \begin{macrocode}
\@@_aftercls_addtodel \g_@@_dir_tate_bool
%    \end{macrocode}
% \subsection{字體相關配置}
% \subsubsection{全局宏申明}
% 申明OpenType字体特性的字列表。
%    \begin{macrocode}
\tl_new:N \g_@@_font_langfeat_tl
%    \end{macrocode}
% \subsubsection{主要設定}
% 对各语言分别设置字体矩阵特性及OpenType字体特性。
%    \begin{macrocode}
\str_if_eq:VnT \g_@@_lang_cj_str { t }
  {
    \clist_gput_left:Nn \g_@@_jfm_feats_clist { trad }
    \tl_gset:Nn \g_@@_font_langfeat_tl { Chinese~Traditional }
  }
\str_if_eq:VnT \g_@@_lang_cj_str { s }
  {
    \clist_gput_left:Nn \g_@@_jfm_feats_clist { smpl }
    \tl_gset:Nn \g_@@_font_langfeat_tl { Chinese~Simplified }
  }
\str_if_eq:VnT \g_@@_lang_cj_str { j }
  {
    \clist_gput_left:Nn \g_@@_jfm_feats_clist { jp }
    \tl_gset:Nn \g_@@_font_langfeat_tl { Japanese }
  }
%    \end{macrocode}
% \subsubsection{字體矩陣高級設置}
% 设置字体矩阵的标点高级特性。
%    \begin{macrocode}
\bool_if:NT \g_@@_jfm_hanging_bool
  { \clist_gput_left:Nn \g_@@_jfm_feats_clist { hgp } }
\bool_if:NT \g_@@_jfm_linegap_bool
  { \clist_gput_left:Nn \g_@@_jfm_feats_clist { lgp } }
%    \end{macrocode}
% \subsubsection{載入中日文支持宏集}
% 载入\textsf{\LuaTeX-ja}宏集。准备好预定义。
%    \begin{macrocode}
\tl_gset:Nx \Cjascale { \tl_use:N \g_@@_font_cjscale_tl }
\tl_gset:Nx \ltj@stdmcfont { \tl_use:N \g_@@_font_mincho_tl }
\tl_gset:Nx \ltj@stdgtfont { \tl_use:N \g_@@_font_gothic_tl }
\tl_gset:Nx \ltj@stdyokojfm
  { eva / { \clist_use:Nn \g_@@_jfm_feats_clist { , } } }
\tl_gset:Nx \ltj@stdtatejfm
  { eva / { \clist_use:Nn \g_@@_jfm_feats_clist { , } , vert } }
\RequirePackage { luatexja }
%    \end{macrocode}
% \subsubsection{補正用單位}
% 设置补正用point单位，依据缩放率。
%    \begin{macrocode}
\dim_gset:Nn \mpt { \g_@@_font_magscale_tl \p@ }
%    \end{macrocode}
% 同时对\verb|\@ptsize|采取同bxjs及ltj文档类相同之策略。「馀」
%    \begin{macrocode}
\dim_compare:nNnT
  { \mpt } < { 1 \p@ }
  { \tl_gset:Nn \@ptsize { -20 } }
\dim_compare:nNnT
  { \mpt } = { 1\p@ }
  { \tl_gset:Nn \@ptsize { 0 } }
\dim_compare:nNnT
  { \mpt } = { 1.095 \p@ }
  { \tl_gset:Nn \@ptsize { 1 } }
\dim_compare:nNnT
  { \mpt } = { 1.200 \p@ }
  { \tl_gset:Nn \@ptsize { 2 } }
\dim_compare:nNnT
  { \mpt } > { 1.200 \p@ }
  { \tl_gset:Nn \@ptsize { -20 } }
%    \end{macrocode}
% \subsubsection{視覺字號補正}
% 对是否补正时统一单位\verb|\mpt|进行处理，而当字号本就无需\verb|\mag|时使补正失效。
%    \begin{macrocode}
\bool_if:NTF \g_@@_font_xreal_bool
  {
    \dim_compare:nNnT
      { \mpt } = { \p@ }
      { \bool_gset_false:N \g_@@_font_xreal_bool }
  }
  { \dim_gset:Nn \mpt { \p@ } }
%    \end{macrocode}
% 实际补正。注意编码等，以及\textsf{expl3}与{\LaTeXe}的兼容性（需小心维护）。
%    \begin{macrocode}
\bool_if:NT \g_@@_font_xreal_bool
  {
    \exp_after:wN \cs_set_eq:NN \cs:w TU/lmr/m/n/10 \cs_end: \scan_stop:
    \exp_after:wN \cs_set_eq:NN \cs:w TU/lmss/m/n/10 \cs_end: \scan_stop:
    \exp_after:wN \cs_set_eq:NN \cs:w TU/lmtt/m/n/10 \cs_end: \scan_stop:
    \@@_luafunc_new:N \@@_magnify_font_calc
    \group_begin:
      % \char_set_catcode_other:N \$
      \char_set_catcode_other:N \%
      \char_set_catcode_space:n { 32 }
      \lua_now:e
        {
          local mpt = tex.getdimen('mpt')/65536
          lua.get_functions_table()[\the\@@_magnify_font_calc] = function()
            tex.sprint(-2, math.floor(0.5 + mpt * tex.getdimen(luatexbase.registernumber 'dimen@')))
          end
          function luatexja.ncls_unmagnify_fsize(e)
            local s = luatexja.print_scaled(floor(0.5 + e / mpt * 65536))
            tex.sprint(-2, (s:match('%.0\$')) and s:sub(1, -3) or s)
          end
        }
      \group_end:
      \cs_new:Npn \@@_magnify_external_font:w #1~at #2~at #3 \@nil
        {
          \tl_set:Nn \l_tempa_tl { #1 }
          \tl_set:Nn \l_tempb_tl { #2 }
          \tl_if_empty:NTF \l_tempb_tl
            {
              \tl_set:Nx \l_tempb_tl
                {
                  scaled \lua_now:e { tex.sprint(-2, math.floor(0.5 + \g_@@_font_magscale_tl * 1000)) }
                }
            }
            {
              \dim_set:Nn \dimen@ { \tl_use:N \l_tempb_tl }
              \tl_set:Nx \l_tempb_tl
                { at \@@_luafunc_use:N \@@_magnify_font_calc~sp }
            }
          \tl_set:Nx \l_tempa_tl
            {
              \tl_set:Nn \exp_not:N \external@font
                { \tl_use:N \l_tempa_tl \tl_use:N \l_tempb_tl }
            }
        }
      \cs_new_eq:NN \@@_get_externalfont_orig: { \get@external@font }
      \cs_gset:Nn \get@external@font
        {
          \tl_gset:Nx \f@size
            { \lua_now:e { luatexja.ncls_unmagnify_fsize(\f@size) } }
          \@@_get_externalfont_orig:
          \group_begin:
            \tl_set:Nx \l_tempa_tl
              { \external@font \tl_use:N \c_space_tl~at \tl_use:N \c_space_tl~at }
            \exp_after:wN \@@_magnify_external_font:w \tl_use:N \l_tempa_tl \@nil
            \exp_after:wN
          \group_end:
          \tl_use:N \l_tempa_tl
        }
  }
%    \end{macrocode}
% NFSS魔改结束，注意其内部宏的局部及全局命名空间。此部分不进行优化。
% \subsubsection{回滾字體可選特性}
% 处理前面键对值取到的用户设定。有对是否激活的判断。
%    \begin{macrocode}
\bool_if:NT \g_@@_font_fallback_bool
  {
    \group_begin:
    \char_set_catcode_space:n { 32 }
    \lua_now:e
      {
        luaotfload.add_fallback
          (
            " nclsfallback ",
            { " \tl_use:N \g_@@_font_fallback_tl : mode = node ; script = cjk ; language = \tl_use:N \g_@@_font_langfeat_tl " }
          )
      }
    \group_end:
  }
%    \end{macrocode}
% \subsubsection{中日NFSS設定}
% 先防止标记这些字体的记号被展开。
%    \begin{macrocode}
\exp_after:wN \cs_set_eq:NN \cs:w JY3/mc/m/n/10 \cs_end: \scan_stop:
\exp_after:wN \cs_set_eq:NN \cs:w JY3/gt/m/n/10 \cs_end: \scan_stop:
\exp_after:wN \cs_set_eq:NN \cs:w JT3/mc/m/n/10 \cs_end: \scan_stop:
\exp_after:wN \cs_set_eq:NN \cs:w JT3/gt/m/n/10 \cs_end: \scan_stop:
%    \end{macrocode}
% 然后封装定义字体参数的命令（{\LaTeXe}提供）。如此可以简单地在将来挂接更多稀奇古怪的特性。然目前只有两个分支。
%    \begin{macrocode}
\cs_new:Nn \@@_font_declareshape:nnnn
  {
    \bool_if:NTF \g_@@_font_fallback_bool
      {
        \DeclareFontShape { #1 } { #2 } { m } { n }
          {
            <-> s * [ \tl_use:N \g_@@_font_cjsacale_tl ] #3 :
            - kern ; script = cjk ; language = \tl_use:N \g_@@_font_langfeat_tl ;
            jfm = { eva / { \clist_use:Nn \g_@@_jfm_feats_clist { , } #4 } } ;
            fallback = nclsfallback
          }
      }
      {
        \DeclareFontShape { #1 } { #2 } { m } { n }
          {
            <-> s * [ \tl_use:N \g_@@_font_cjsacale_tl ] #3 :
            - kern ; script = cjk ; language = \tl_use:N \g_@@_font_langfeat_tl ;
            jfm = { eva / { \clist_use:Nn \g_@@_jfm_feats_clist { , } #4 } }
          }
      }
  }
%    \end{macrocode}
% 终于，定义四个源字体。
%    \begin{macrocode}
\@@_font_declareshape:nnnn { JY3 } { mc } { \tl_use:N \g_@@_font_mincho_tl } { }
\@@_font_declareshape:nnnn { JY3 } { gt } { \tl_use:N \g_@@_font_gothic_tl } { }
\@@_font_declareshape:nnnn { JT3 } { mc } { \tl_use:N \g_@@_font_mincho_tl } { ,vert }
\@@_font_declareshape:nnnn { JT3 } { gt } { \tl_use:N \g_@@_font_gothic_tl } { ,vert }
%    \end{macrocode}
% 然后偷懒，用递归定义其余分支字体。至于delux就以后再加吧。
%    \begin{macrocode}
\clist_map_inline:nn { JY3, JT3 }
  {
    \clist_map_inline:nn { n, it, sl, sc }
      {
        \clist_map_inline:nn { m, b, bx, sb }
          {
            \bool_if:nF { \str_if_eq_p:nn { ##1 } { n } && \str_if_eq_p:nn { ####1 } { m } }
              { \DeclareFontShape { #1 } { gt } { ####1 } { ##1 } { <-> ssub * gt/m/n } { } }
          }
        \str_if_eq:nn { ##1 } { n }
          { \DeclareFontShape { #1 } { mc } { m } { ##1 } { <-> ssub * mc/m/n } { } }
        \clist_map_inline:nn { b, bx, sb }
          { \DeclareFontShape { #1 } { mc } { ####1 } { ##1 } { <-> ssub * gt/m/n } { }}
      }
  }
%    \end{macrocode}
% \subsubsection{清理內存}
% 内存管理。清除不必要的宏定义。
%    \begin{macrocode}
\@@_aftercls_addtodel:N \g_@@_font_magscale_tl
\@@_aftercls_addtodel:N \g_@@_lang_cj_str
\@@_aftercls_addtodel:N \g_@@_font_langfeat_tl
\@@_aftercls_addtodel:N \g_@@_font_mincho_tl
\@@_aftercls_addtodel:N \g_@@_font_gothic_tl
\@@_aftercls_addtodel:N \g_@@_font_cjscale_tl
\@@_aftercls_addtodel:N \g_@@_jfm_hanging_tl
\@@_aftercls_addtodel:N \g_@@_jfm_linegap_tl
\@@_aftercls_addtodel:N \g_@@_font_xreal_bool
\@@_aftercls_addtodel:N \g_@@_font_fallback_bool
\@@_aftercls_addtodel:N \g_@@_font_fallback_tl
\@@_aftercls_addtodel:N \@@_font_declareshape:nnnn
%    \end{macrocode}
\endinput
